{"version":3,"sources":["../src/configs.js"],"names":["namedColors","getStyleValue","style","split","defaultUnitExportFn","unit","defaultUnitImportFn","replace","ignoredNodeAttributes","ignoredEntityNodeAttributes","spreadNodeAttributes","attributesObject","Object","keys","reduce","attributeString","attributeName","defaultFontFamilies","name","family","getHexColor","color","test","indexOf","rgbArray","convertedColor","length","map","hex","parseInt","x","toString","join","blocks","blockTypes","blockNames","key","convertAtomicBlock","block","contentState","blockNodeAttributes","contentBlock","getBlockForKey","className","class","nodeAttrAsProps","entityKey","getEntityAt","entity","getEntity","mediaType","getType","toLowerCase","data","float","alignment","getData","url","link","link_target","width","height","meta","imageWrapStyle","styledClassName","textAlign","display","__html","undefined","entityToHTML","options","originalText","entityExportFn","entityType","type","customOutput","nodeAttributes","href","target","styleToHTML","unitExportFn","styleExportFn","textDecoration","backgroundColor","fontSize","lineHeight","letterSpacing","fontFamily","fontFamilies","find","item","blockToHTML","blockExportFn","blockStyle","blockType","textIndent","isNaN","previousBlock","getBlockBefore","nextBlock","getBlockAfter","previousBlockType","nextBlockType","start","end","nest","htmlToStyle","source","nodeName","node","currentStyle","unitImportFn","newStyle","forEach","call","add","toUpperCase","parseFloat","styleImportFn","htmlToEntity","createEntity","entityImportFn","customInput","alt","title","id","controls","autoplay","loop","poster","autoPlay","attributes","attr","value","querySelectorAll","getAttribute","parentNode","entityData","classList","contains","embedContent","innerHTML","outerHTML","htmlToBlock","blockImportFn","nodeStyle","blockData","Math","ceil","getToHTMLConfig","getFromHTMLConfig"],"mappings":"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","file":"configs.js","sourcesContent":["import React from 'react'\n\nexport const namedColors = {\n  \"aliceblue\": \"#f0f8ff\",\n  \"antiquewhite\": \"#faebd7\",\n  \"aqua\": \"#00ffff\",\n  \"aquamarine\": \"#7fffd4\",\n  \"azure\": \"#f0ffff\",\n  \"beige\": \"#f5f5dc\",\n  \"bisque\": \"#ffe4c4\",\n  \"black\": \"#000000\",\n  \"blanchedalmond\": \"#ffebcd\",\n  \"blue\": \"#0000ff\",\n  \"blueviolet\": \"#8a2be2\",\n  \"brown\": \"#a52a2a\",\n  \"burlywood\": \"#deb887\",\n  \"cadetblue\": \"#5f9ea0\",\n  \"chartreuse\": \"#7fff00\",\n  \"chocolate\": \"#d2691e\",\n  \"coral\": \"#ff7f50\",\n  \"cornflowerblue\": \"#6495ed\",\n  \"cornsilk\": \"#fff8dc\",\n  \"crimson\": \"#dc143c\",\n  \"cyan\": \"#00ffff\",\n  \"darkblue\": \"#00008b\",\n  \"darkcyan\": \"#008b8b\",\n  \"darkgoldenrod\": \"#b8860b\",\n  \"darkgray\": \"#a9a9a9\",\n  \"darkgreen\": \"#006400\",\n  \"darkkhaki\": \"#bdb76b\",\n  \"darkmagenta\": \"#8b008b\",\n  \"darkolivegreen\": \"#556b2f\",\n  \"darkorange\": \"#ff8c00\",\n  \"darkorchid\": \"#9932cc\",\n  \"darkred\": \"#8b0000\",\n  \"darksalmon\": \"#e9967a\",\n  \"darkseagreen\": \"#8fbc8f\",\n  \"darkslateblue\": \"#483d8b\",\n  \"darkslategray\": \"#2f4f4f\",\n  \"darkturquoise\": \"#00ced1\",\n  \"darkviolet\": \"#9400d3\",\n  \"deeppink\": \"#ff1493\",\n  \"deepskyblue\": \"#00bfff\",\n  \"dimgray\": \"#696969\",\n  \"dodgerblue\": \"#1e90ff\",\n  \"firebrick\": \"#b22222\",\n  \"floralwhite\": \"#fffaf0\",\n  \"forestgreen\": \"#228b22\",\n  \"fuchsia\": \"#ff00ff\",\n  \"gainsboro\": \"#dcdcdc\",\n  \"ghostwhite\": \"#f8f8ff\",\n  \"gold\": \"#ffd700\",\n  \"goldenrod\": \"#daa520\",\n  \"gray\": \"#808080\",\n  \"green\": \"#008000\",\n  \"greenyellow\": \"#adff2f\",\n  \"honeydew\": \"#f0fff0\",\n  \"hotpink\": \"#ff69b4\",\n  \"indianred \": \"#cd5c5c\",\n  \"indigo\": \"#4b0082\",\n  \"ivory\": \"#fffff0\",\n  \"khaki\": \"#f0e68c\",\n  \"lavender\": \"#e6e6fa\",\n  \"lavenderblush\": \"#fff0f5\",\n  \"lawngreen\": \"#7cfc00\",\n  \"lemonchiffon\": \"#fffacd\",\n  \"lightblue\": \"#add8e6\",\n  \"lightcoral\": \"#f08080\",\n  \"lightcyan\": \"#e0ffff\",\n  \"lightgoldenrodyellow\": \"#fafad2\",\n  \"lightgrey\": \"#d3d3d3\",\n  \"lightgreen\": \"#90ee90\",\n  \"lightpink\": \"#ffb6c1\",\n  \"lightsalmon\": \"#ffa07a\",\n  \"lightseagreen\": \"#20b2aa\",\n  \"lightskyblue\": \"#87cefa\",\n  \"lightslategray\": \"#778899\",\n  \"lightsteelblue\": \"#b0c4de\",\n  \"lightyellow\": \"#ffffe0\",\n  \"lime\": \"#00ff00\",\n  \"limegreen\": \"#32cd32\",\n  \"linen\": \"#faf0e6\",\n  \"magenta\": \"#ff00ff\",\n  \"maroon\": \"#800000\",\n  \"mediumaquamarine\": \"#66cdaa\",\n  \"mediumblue\": \"#0000cd\",\n  \"mediumorchid\": \"#ba55d3\",\n  \"mediumpurple\": \"#9370d8\",\n  \"mediumseagreen\": \"#3cb371\",\n  \"mediumslateblue\": \"#7b68ee\",\n  \"mediumspringgreen\": \"#00fa9a\",\n  \"mediumturquoise\": \"#48d1cc\",\n  \"mediumvioletred\": \"#c71585\",\n  \"midnightblue\": \"#191970\",\n  \"mintcream\": \"#f5fffa\",\n  \"mistyrose\": \"#ffe4e1\",\n  \"moccasin\": \"#ffe4b5\",\n  \"navajowhite\": \"#ffdead\",\n  \"navy\": \"#000080\",\n  \"oldlace\": \"#fdf5e6\",\n  \"olive\": \"#808000\",\n  \"olivedrab\": \"#6b8e23\",\n  \"orange\": \"#ffa500\",\n  \"orangered\": \"#ff4500\",\n  \"orchid\": \"#da70d6\",\n  \"palegoldenrod\": \"#eee8aa\",\n  \"palegreen\": \"#98fb98\",\n  \"paleturquoise\": \"#afeeee\",\n  \"palevioletred\": \"#d87093\",\n  \"papayawhip\": \"#ffefd5\",\n  \"peachpuff\": \"#ffdab9\",\n  \"peru\": \"#cd853f\",\n  \"pink\": \"#ffc0cb\",\n  \"plum\": \"#dda0dd\",\n  \"powderblue\": \"#b0e0e6\",\n  \"purple\": \"#800080\",\n  \"rebeccapurple\": \"#663399\",\n  \"red\": \"#ff0000\",\n  \"rosybrown\": \"#bc8f8f\",\n  \"royalblue\": \"#4169e1\",\n  \"saddlebrown\": \"#8b4513\",\n  \"salmon\": \"#fa8072\",\n  \"sandybrown\": \"#f4a460\",\n  \"seagreen\": \"#2e8b57\",\n  \"seashell\": \"#fff5ee\",\n  \"sienna\": \"#a0522d\",\n  \"silver\": \"#c0c0c0\",\n  \"skyblue\": \"#87ceeb\",\n  \"slateblue\": \"#6a5acd\",\n  \"slategray\": \"#708090\",\n  \"snow\": \"#fffafa\",\n  \"springgreen\": \"#00ff7f\",\n  \"steelblue\": \"#4682b4\",\n  \"tan\": \"#d2b48c\",\n  \"teal\": \"#008080\",\n  \"thistle\": \"#d8bfd8\",\n  \"tomato\": \"#ff6347\",\n  \"turquoise\": \"#40e0d0\",\n  \"violet\": \"#ee82ee\",\n  \"wheat\": \"#f5deb3\",\n  \"white\": \"#ffffff\",\n  \"whitesmoke\": \"#f5f5f5\",\n  \"yellow\": \"#ffff00\",\n  \"yellowgreen\": \"#9acd32\"\n}\n\nconst getStyleValue = style => style.split('-')[1]\nconst defaultUnitExportFn = unit => unit + 'px'\nconst defaultUnitImportFn = unit => unit.replace('px', '')\n\nconst ignoredNodeAttributes = ['style']\nconst ignoredEntityNodeAttributes = ['style', 'href', 'target', 'alt', 'title', 'id', 'controls', 'autoplay', 'loop', 'poster']\n\nconst spreadNodeAttributes = (attributesObject) => {\n  return Object.keys(attributesObject).reduce((attributeString, attributeName) => {\n    return `${attributeString} ${attributeName}=\"${attributesObject[attributeName]}\"`\n  }, '').replace(/^\\s$/, '')\n}\n\nexport const defaultFontFamilies = [{\n    name: 'Araial',\n    family: 'Arial, Helvetica, sans-serif'\n  }, {\n    name: 'Georgia',\n    family: 'Georgia, serif'\n  }, {\n    name: 'Impact',\n    family: 'Impact, serif'\n  }, {\n    name: 'Monospace',\n    family: '\"Courier New\", Courier, monospace'\n  }, {\n    name: 'Tahoma',\n    family: \"tahoma, arial, 'Hiragino Sans GB', 宋体, sans-serif\"\n}]\n\nexport const getHexColor = (color) => {\n\n  color = color.replace('color:', '').replace(';', '').replace(' ', '')\n\n  if (/^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(color)) {\n    return color\n  } else if (namedColors[color]) {\n    return namedColors[color]\n  } else if (color.indexOf('rgb') === 0) {\n\n    let rgbArray = color.split(',')\n    let convertedColor = rgbArray.length < 3 ? null : '#' + [rgbArray[0], rgbArray[1], rgbArray[2]].map(x => {\n      const hex = parseInt(x.replace(/\\D/g, ''), 10).toString(16)\n      return hex.length === 1 ? '0' + hex : hex\n    }).join('')\n\n    return /^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(convertedColor) ? convertedColor : null\n\n  } else {\n    return null\n  }\n\n}\n\nexport const blocks = {\n  'header-one': 'h1',\n  'header-two': 'h2',\n  'header-three': 'h3',\n  'header-four': 'h4',\n  'header-five': 'h5',\n  'header-six': 'h6',\n  'unstyled': 'p',\n  'blockquote': 'blockquote'\n}\n\nconst blockTypes = Object.keys(blocks)\nconst blockNames = blockTypes.map(key => blocks[key])\n\nconst convertAtomicBlock = (block, contentState, blockNodeAttributes) => {\n\n  if (!block || !block.key) {\n    return <p></p>\n  }\n\n  const contentBlock = contentState.getBlockForKey(block.key)\n\n  let { class: className, ...nodeAttrAsProps } = blockNodeAttributes\n  nodeAttrAsProps.className = className\n\n  if (!contentBlock) {\n    return <p></p>\n  }\n\n  const entityKey = contentBlock.getEntityAt(0)\n\n  if (!entityKey) {\n    return <p></p>\n  }\n\n  const entity = contentState.getEntity(entityKey)\n  const mediaType = entity.getType().toLowerCase()\n\n  let { float, alignment } = block.data\n  let { url, link, link_target, width, height, meta } = entity.getData()\n\n  if (mediaType === 'image') {\n\n    let imageWrapStyle = {}\n    let styledClassName = ''\n\n    if (float) {\n      imageWrapStyle.float = float\n      styledClassName += ' float-' + float\n    } else if (alignment) {\n      imageWrapStyle.textAlign = alignment\n      styledClassName += ' align-' + alignment\n    }\n\n    if (link) {\n      return (\n        <div className={\"media-wrap image-wrap\" + styledClassName} style={imageWrapStyle}>\n          <a style={{display:'inline-block'}} href={link} target={link_target}>\n            <img {...nodeAttrAsProps} {...meta} src={url} width={width} height={height} style={{width, height}} />\n          </a>\n        </div>\n      )\n    } else {\n      return (\n        <div className={\"media-wrap image-wrap\" + styledClassName} style={imageWrapStyle}>\n          <img {...nodeAttrAsProps} {...meta} src={url} width={width} height={height} style={{width, height}}/>\n        </div>\n      )\n    }\n\n  } else if (mediaType === 'audio') {\n    return <div className=\"media-wrap audio-wrap\"><audio controls {...nodeAttrAsProps} {...meta} src={url} /></div>\n  } else if (mediaType === 'video') {\n    return <div className=\"media-wrap video-wrap\"><video controls {...nodeAttrAsProps} {...meta} src={url} width={width} height={height} /></div>\n  } else if (mediaType === 'embed') {\n    return <div className=\"media-wrap embed-wrap\"><div dangerouslySetInnerHTML={{__html: url}}/></div>\n  } else if (mediaType === 'iframe') {\n    return (\n      <div className=\"media-wrap iframe-wrap\">\n        <iframe src={url} frameBorder=\"0\" style={{ width: width || undefined, height: height || undefined }}></iframe>\n      </div>\n    )\n  } else if (mediaType === 'hr') {\n    return <hr></hr>\n  } else {\n    return <p></p>\n  }\n\n}\n\nconst entityToHTML = (options) => (entity, originalText) => {\n\n  const { entityExportFn } = options\n  const entityType = entity.type.toLowerCase()\n\n  if (entityExportFn) {\n    const customOutput = entityExportFn(entity, originalText)\n    if (customOutput) {\n      return customOutput\n    }\n  }\n\n  if (entityType === 'link') {\n    let { class: className, ...nodeAttrAsProps } = entity.data.nodeAttributes || {}\n    nodeAttrAsProps.className = className\n    return <a href={entity.data.href} target={entity.data.target} {...nodeAttrAsProps}/>\n  }\n\n}\n\nconst styleToHTML = (options) => (style) => {\n\n  const unitExportFn = options.unitExportFn || defaultUnitExportFn\n\n  if (options.styleExportFn) {\n    const customOutput = options.styleExportFn(style, options)\n    if (customOutput) {\n      return customOutput\n    }\n  }\n\n  style = style.toLowerCase()\n\n  if (style === 'strikethrough') {\n    return <span style={{textDecoration: 'line-through'}}/>\n  } else if (style === 'superscript') {\n    return <sup/>\n  } else if (style === 'subscript') {\n    return <sub/>\n  } else if (style.indexOf('color-') === 0) {\n    return <span style={{color: '#' + getStyleValue(style)}}/>\n  } else if (style.indexOf('bgcolor-') === 0) {\n    return <span style={{backgroundColor: '#' + getStyleValue(style)}}/>\n  } else if (style.indexOf('fontsize-') === 0) {\n    return <span style={{fontSize: unitExportFn(getStyleValue(style), 'font-size', 'html')}}/>\n  } else if (style.indexOf('lineheight-') === 0) {\n    return <span style={{lineHeight: unitExportFn(getStyleValue(style), 'line-height', 'html')}}/> \n  } else if (style.indexOf('letterspacing-') === 0) {\n    return <span style={{letterSpacing: unitExportFn(getStyleValue(style), 'letter-spacing', 'html')}}/>\n  } else if (style.indexOf('fontfamily-') === 0) {\n    let fontFamily = options.fontFamilies.find((item) => item.name.toLowerCase() === getStyleValue(style))\n    if (!fontFamily) return\n    return <span style={{fontFamily: fontFamily.family}}/>\n  }\n\n}\n\nconst blockToHTML = (options) => (block) => {\n\n  const { blockExportFn, contentState } = options\n\n  if (blockExportFn) {\n    const customOutput = blockExportFn(contentState, block)\n    if (customOutput) {\n      return customOutput\n    }\n  }\n\n  let blockStyle = ''\n\n  const blockType = block.type.toLowerCase()\n  const { textAlign, textIndent, nodeAttributes = {} } = block.data\n  const attributeString = spreadNodeAttributes(nodeAttributes)\n\n  if (textAlign || textIndent) {\n\n    blockStyle = ' style=\"'\n\n    if (textAlign) {\n      blockStyle += `text-align:${textAlign};`\n    }\n\n    if (textIndent && !isNaN(textIndent) && textIndent > 0) {\n      blockStyle += `text-indent:${textIndent * 2}em;`\n    }\n\n    blockStyle += '\"'\n\n  }\n\n  if (blockType === 'atomic') {\n    return convertAtomicBlock(block, contentState, nodeAttributes)\n  } else if (blockType === 'code-block') {\n\n    const previousBlock = contentState.getBlockBefore(block.key)\n    const nextBlock = contentState.getBlockAfter(block.key)\n    const previousBlockType = previousBlock && previousBlock.getType()\n    const nextBlockType = nextBlock && nextBlock.getType()\n\n    let start = ''\n    let end = ''\n\n    if (previousBlockType !== 'code-block') {\n      start = `<pre${attributeString}><code>`\n    } else {\n      start = ''\n    }\n\n    if (nextBlockType !== 'code-block') {\n      end = '</code></pre>'\n    } else {\n      end = '<br/>'\n    }\n\n    return { start, end }\n\n  } else if (blocks[blockType]) {\n    return {\n      start: `<${blocks[blockType]}${blockStyle}${attributeString}>`,\n      end: `</${blocks[blockType]}>`\n    }\n  } else if (blockType === 'unordered-list-item') {\n    return {\n      start: `<li${blockStyle}${attributeString}>`,\n      end: '</li>',\n      nest: <ul/>\n    }\n  } else if (blockType === 'ordered-list-item') {\n    return {\n      start: `<li${blockStyle}${attributeString}>`,\n      end: '</li>',\n      nest: <ol/>\n    }\n  }\n\n}\n\nconst htmlToStyle = (options, source) => (nodeName, node, currentStyle) => {\n\n  if (!node || !node.style) {\n    return currentStyle\n  }\n\n  const unitImportFn = options.unitImportFn || defaultUnitImportFn\n  let newStyle = currentStyle;\n\n  [].forEach.call(node.style, (style) => {\n\n    if (nodeName === 'span' && style === 'color') {\n      let color = getHexColor(node.style.color)\n      newStyle = color ? newStyle.add('COLOR-' + color.replace('#', '').toUpperCase()) : newStyle\n    } else if (nodeName === 'span' && style === 'background-color') {\n      let color = getHexColor(node.style.backgroundColor)\n      newStyle = color ? newStyle.add('BGCOLOR-' + color.replace('#', '').toUpperCase()) : newStyle\n    } else if (nodeName === 'span' && style === 'font-size') {\n      newStyle = newStyle.add('FONTSIZE-' + unitImportFn(node.style.fontSize, 'font-size', source))\n    } else if (nodeName === 'span' && style === 'line-height' && !isNaN(parseFloat(node.style.lineHeight, 10))) {\n      newStyle = newStyle.add('LINEHEIGHT-' + unitImportFn(node.style.lineHeight, 'line-height', source))\n    } else if (nodeName === 'span' && style === 'letter-spacing' && !isNaN(parseFloat(node.style.letterSpacing, 10))) {\n      newStyle = newStyle.add('LETTERSPACING-' + unitImportFn(node.style.letterSpacing, 'letter-spacing', source))\n    } else if (nodeName === 'span' && style === 'text-decoration') {\n      if (node.style.textDecoration === 'line-through') {\n        newStyle = newStyle.add('STRIKETHROUGH')\n      } else if (node.style.textDecoration === 'underline') {\n        newStyle = newStyle.add('UNDERLINE')\n      }\n    } else if (nodeName === 'span' && style === 'font-family') {\n      let fontFamily = options.fontFamilies.find((item) => item.family.toLowerCase() === node.style.fontFamily.toLowerCase())\n      if (!fontFamily) return;\n      newStyle = newStyle.add('FONTFAMILY-' + fontFamily.name.toUpperCase())\n    }\n\n  })\n\n  if (nodeName === 'sup') {\n    newStyle = newStyle.add('SUPERSCRIPT')\n  } else if (nodeName === 'sub') {\n    newStyle = newStyle.add('SUBSCRIPT')\n  }\n\n  options.styleImportFn && (newStyle = options.styleImportFn(nodeName, node, newStyle, source) || newStyle)\n  return newStyle\n\n}\n\nconst htmlToEntity = (options, source) => (nodeName, node, createEntity) => {\n\n  if (options && options.entityImportFn) {\n    const customInput = options.entityImportFn(nodeName, node, createEntity, source)\n    if (customInput) {\n      return customInput\n    }\n  }\n\n  nodeName = nodeName.toLowerCase()\n\n  const { alt, title, id, controls, autoplay, loop, poster } = node\n  let meta = {}\n  let nodeAttributes = {}\n\n  id && (meta.id = id)\n  alt && (meta.alt = alt)\n  title && (meta.title = title)\n  controls && (meta.controls = controls)\n  autoplay && (meta.autoPlay = autoplay)\n  loop && (meta.loop = loop)\n  poster && (meta.poster = poster)\n\n  node.attributes && Object.keys(node.attributes).forEach((key) => {\n    let attr = node.attributes[key]\n    ignoredEntityNodeAttributes.indexOf(attr.name) === -1 && (nodeAttributes[attr.name] = attr.value);\n  })\n\n  if (nodeName === 'a' && !node.querySelectorAll('img').length) {\n    let href = node.getAttribute('href')\n    let target = node.getAttribute('target')\n    return createEntity('LINK', 'MUTABLE',{ href, target, nodeAttributes })\n  } else if (nodeName === 'audio') {\n    return createEntity('AUDIO', 'IMMUTABLE',{ url: node.getAttribute('src'), meta, nodeAttributes }) \n  } else if (nodeName === 'video') {\n    return createEntity('VIDEO', 'IMMUTABLE',{ url: node.getAttribute('src'), meta, nodeAttributes }) \n  } else if (nodeName === 'img') {\n\n    let parentNode = node.parentNode\n    let entityData = { meta }\n    let { width, height } = node.style\n\n    entityData.url = node.getAttribute('src')\n    width && (entityData.width = width)\n    height && (entityData.height = height)\n\n    if (parentNode.nodeName.toLowerCase() === 'a') {\n      entityData.link = parentNode.getAttribute('href')\n      entityData.link_target = parentNode.getAttribute('target')\n    }\n\n    return createEntity('IMAGE', 'IMMUTABLE', entityData) \n\n  } else if (nodeName === 'iframe') {\n    let entityData = { meta }\n    let { width, height } = node.style\n    entityData.url = node.getAttribute('src')\n    width && (entityData.width = width)\n    height && (entityData.height = height)\n    return createEntity('IFRAME', 'IMMUTABLE', entityData);\n  } else if (nodeName === 'hr') {\n    return createEntity('HR', 'IMMUTABLE', {}) \n  } else if (node.parentNode && node.parentNode.classList.contains('embed-wrap')) {\n\n    const embedContent = node.innerHTML || node.outerHTML\n\n    if (embedContent) {\n      return createEntity('EMBED', 'IMMUTABLE', {\n        url: embedContent\n      })   \n    }\n\n  }\n\n}\n\nconst htmlToBlock = (options, source) => (nodeName, node) => {\n\n  if (options && options.blockImportFn) {\n    const customInput = options.blockImportFn(nodeName, node, source)\n    if (customInput) {\n      return customInput\n    }\n  }\n\n  let nodeAttributes = {}\n  let nodeStyle = node.style || {}\n\n  node.attributes && Object.keys(node.attributes).forEach((key) => {\n    let attr = node.attributes[key]\n    ignoredNodeAttributes.indexOf(attr.name) === -1 && (nodeAttributes[attr.name] = attr.value);\n  })\n\n  if (node.classList && node.classList.contains('media-wrap')) {\n\n    return {\n      type: 'atomic',\n      data: {\n        nodeAttributes: nodeAttributes,\n        float: nodeStyle.float,\n        alignment: nodeStyle.textAlign\n      }\n    }\n\n  } else if (nodeName === 'img') {\n\n    return {\n      type: 'atomic',\n      data: {\n        nodeAttributes: nodeAttributes,\n        float: nodeStyle.float,\n        alignment: nodeStyle.textAlign\n      }\n    }\n\n  } else if (nodeName === 'hr') {\n\n    return {\n      type: 'atomic',\n      data: { nodeAttributes }\n    }\n\n  } else if (nodeName === 'pre') {\n\n    node.innerHTML = node.innerHTML.replace(/<code(.*?)>/g, '').replace(/<\\/code>/g, '')\n\n    return {\n      type: 'code-block',\n      data: { nodeAttributes }\n    }\n\n  } else if (blockNames.indexOf(nodeName) !== -1) {\n\n    const blockData = { nodeAttributes }\n\n    if (nodeStyle.textAlign) {\n      blockData.textAlign = nodeStyle.textAlign\n    }\n\n    if (nodeStyle.textIndent) {\n      blockData.textIndent = /^\\d+em$/.test(nodeStyle.textIndent) ? Math.ceil(parseInt(nodeStyle.textIndent, 10) / 2) : 1\n    }\n\n    return {\n      type: blockTypes[blockNames.indexOf(nodeName)],\n      data: blockData\n    }\n\n  }\n\n}\n\nexport const getToHTMLConfig = (options) => {\n\n  return {\n    styleToHTML: styleToHTML(options),\n    entityToHTML: entityToHTML(options),\n    blockToHTML: blockToHTML(options)\n  }\n\n}\n\nexport const getFromHTMLConfig = (options, source = 'unknow') => {\n\n  return { \n    htmlToStyle: htmlToStyle(options, source),\n    htmlToEntity: htmlToEntity(options, source),\n    htmlToBlock: htmlToBlock(options, source)\n  }\n\n}"]}